**First prompt**

实现一个agent平台. 包含后端和前端代码. 后端使用Rust单实例, 不要拆分微服务, 数据库使用mysql.
能够执行编排好的agent流程. 流程可以从dify DSL导入. 流程需要进行版本管理, 可以回退.
能够自动存储用户的聊天会话上下文.
能对接不同的大模型, 需抽象出trait.
能对接不同的向量库, 需抽象出trait.
能将普通的HTTP接口配置为MCP工具, MCP配置需要进行版本管理, 可以回退.
提供MCP host服务, 通过MCP配置将REST接口代理为MCP工具, 提供工具列表和工具调用能力.
提供认证接口, 传入租户ID及昵称和密码, 认证成功后在token中附带租户ID和用户ID及昵称, 流程执行时调用MCP和知识库时需透穿租户ID.
agent的执行需要有审计历史.
前端需要能管理agent流程和MCP工具的版本, 能配置向量库, 能配置MCP工具, 能审计agent调用, 能审计agent执行历史, 能查看用户会话历史.
前端还需提供苹果风格的首页, 包含基本的登录表单.

**Second prompt**

数据库访问层需要使用SeaORM. 业务逻辑严格限制在领域层

**Third prompt**

增加一个实体"数字人(Agent)", 包含以下属性:
- 租户ID
- 名称
- 头像
- 知识库列表
- MCP工具列表
- Flow列表
- 系统提示词
- 附加设定内容
- 预设问题列表(最多三个)
- 来源Agent ID(有值则代表该Agent自来源Agent复制而来)
- 创建人ID

只有Agent的创建人可以修改其配置.

并增加Agent与User的多对多雇佣关系表.

Agent列表界面采用卡片样式.

**Fourth prompt**

模型变更:
Agent只能有一个雇佣者, 用agents表的employer_id表示(空表示无人雇佣).
agent_employments表废弃.
当进行雇佣时, 首先对原Agent执行复制, 再填充其employer_id.
当解雇时, 填充fired_at字段.

---

对MCP工具进行如下改动:

ParameterSchema增加position(body / header / path), 用于标识参数的位置.
当position为path时, HTTPToolConfig的endpoint属性中可以用{参数名}来包含该参数.

HTTPToolConfig增加response_template, 用于将JSON响应翻译为工具的输出. 例如:
```
# Category list
{{- range $category_index, $category := .data }}
- **Category Name**: {{ .classifyName }}
  **Goods list**:
    {{- range $goods_index, $goods := .goodsList }}
    - **Goods Name**: {{ .goodsName }}
    {{- end }}
{{- end }}
```
模板需要能支持简单的变量和循环, 性能越高越好.

实现MCP server能力, 并提供工具列表和调用接口.

---

支持新的节点类型answer(直接回复). 其data包含以下属性:
* answer: 输出字符串. 可以包含引用. 例如"{{#1761621778329.checking_items#}}"代表输出节点ID=1761621778329的变量"checking_items"

执行逻辑: 将answer的计算结果输出到该节点的变量"answer".

---

支持新的节点类型parameter-extractor(参数提取器). 其data包含以下属性:
* model: 与LLM节点的data.model定义相同
* instruction: 系统提示词
* query: 输入变量的路径数组, 例如[ "1759993208994", "standard_text" ]代表节点ID=1759993208994的变量"standard_text". 用作用户提示词
* parameters: 输出参数数组, 只有一个条目, 格式为{ "name": "输出参数名称" }

执行逻辑: 传入系统提示词和用户提示词, 指定大模型输出格式为字符串数组, 获取大模型调用结果并存放在parameters[0]指定的参数名称中.

---

支持新的节点类型iteration(迭代). 其data包含以下属性:
* iterator_selector: 输入变量的路径数组, 例如[ "1759993208994", "checking_items" ]代表节点ID=1759993208994的变量"checking_items". 该变量的类型是一个字符串数组, 用作后续遍历
* output_selector: 输出变量的路径数组, 例如[ "1761578154176", "structured_output" ]代表节点ID=1761578154176的变量"structured_output". 该变量的类型是一个对象数组, 其值由每次迭代的结果聚合而成
* start_node_id: 每次迭代的开始节点ID

执行逻辑: 遍历iterator_selector的条目, 将条目的值存储为start_node_id对应节点的item属性, 并从start_node_id对应节点依次开始执行子流程, 一轮迭代执行结束后将结果合并到output_selector指定的变量数组中. 迭代全部结束后输出output_selector指定的变量数组